이진 탐색 트리 Binary Search Tree (BST)


[이진 트리의 정의]
비어있거나, 한 개의 Root와 다른 두 개의 다른 값을 가진 노드의 집합


[트리의 용어]
* 방향 간선(Directed Edge): 부모 노드에서 자식 노드로 가는 경로
* 루트 노드(Root Node)    : 부모가 없는 노드, 트리는 하나의 루트 노드만을 가진다
* 단말 노드(Leaf Node)    : 자식이 없는 노드
* 각 노드의 깊이(Depth)    : 루트 노드에서 자기 자신까지 가는 경로의 길이
* 차수(Degree)            : 특정 노드가 가지는 자식 노드의 개수
* 트리의 높이(height)      : 루트 노드에서 가장 깊이 있는 노드까지 가는 경로의 길이(루트 노드만 있는 트리의 경우는 높이가 0이 된다)
* 형제 노드(Sibling Node)  : 같은 부모를 가진 노드


[트리의 종류]
* 루트가 있는 트리(Rooted Binary Tree): 모든 노드의 자식 노드가 최대 2개인 루트를 가진 트리
* 정 이진 트리(Full Binary Tree)      : 단말 노드가 아닌 모든 노드가 2개의 자식 노드를 가진 트리
* 포화 이진 트리(Perfect Binary Tree) : 모든 단말 노드의 깊이가 같은 정 이진 트리(Full Binary Tree)
* 완전 이진 트리(Complete Binary Tree): 끝부분을 제외하고 모든 노드가 채워진 이진 트리
* 무한 완전 트리(Infinite Complete Binary Tree)
* 균형 이진 트리(Balanced Binary Tree)
* 변질 트리(Degenerate Tree)


[BST만의 세부적인 정의]
1. 비어 있지 않다면 모든 노드(Node)는 서로 다른 값(Key)을 갖는다.
2. 왼쪽 서브 트리에 포함된 값들은 만일 존재한다면, 루트의 값보다 항상 작은 값을 가진다.
3. 오른쪽 서브 트리에 포함된 값들은 만일 존재한다면, 루트의 값보다 항상 큰 값을 가진다.
4. 왼쪽과 오른쪽 서브 트리는 각각 루트 노드를 가진 또 하나의 이진 탐색 트리 구조여야 한다.


[BST의 탐색]
* 전위(pre-order) 탐색 : 내 노드, 왼쪽 자식 노드, 오른쪽 자식 노드 순서로 방문
* 후위(post-order) 탐색: 왼쪽 자식 노드, 오른쪽 자식 노드, 내 노드 순서로 방문
* 중위(in-order) 탐색  : 왼쪽 자식 노드, 내 노드, 오른쪽 자식 노드 순서로 방문