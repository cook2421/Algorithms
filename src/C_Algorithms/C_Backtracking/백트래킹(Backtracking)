백트래킹 Backtracking


[개념]
백트래킹은 '가능한 모든 방법을 탐색한다'는데 기본 아이디어가 있다.

대표적인 완전 탐색 방법으로는 DFS가 있다.
DFS는 현재 지점에서 방문할 곳이 있으면 재귀 호출을 이용해서 계속 이동한다.
DFS의 장점은 무한히 깊은 곳을 찾아야할 때 효과적이다.
하지만 DFS는 모든 곳을 방문하기 때문에 굳이 목표지점이 있지 않는 경로로 빠져서 비효율적인 결과를 초래할 수도 있다.

그래서 이와 같은 비효율적인 경로를 차단하고 목표지점에 갈 수 있는 가능성이 있는 루트를 검사하는 방법이 백트래킹 알고리즘이다.
백트래킹은 DFS에 가지치기(Pruning)를 통해 가도되지 않는 루트는 고려하지 않고 탐색하는 완전 탐색 기법이다.
가지치기를 얼마나 잘하느냐에 따라서 효율이 극대화될 수 있는 방법이다.

어쨌든 우리가 알아야할 것은 '배제', '풀이 시간 단축'이다.


[N-Queen]
'크기가 N*N인 체스판 위에 퀸 N개를 서로 공격할 수 없게 놓는 문제이다.
 N이 주어졌을 때, 퀸을 놓는 방법의 수를 구하는 프로그램을 작성하시오.'

 4*4를 기준으로 문제를 풀어보자. 퀸의 현재 위치는 (1,1).
 퀸은 배치된 칸을 기준으로 오와 열, 대각선 이동이 가능한 말이다.

 만약 이 문제를 가지치기 하지 않는 DFS로 풀이했다면 유망하지 않은 (2,1), (2,2) 지점도 검사를 했을 것이다.
 그렇게 되면 더 큰 체스판에서 퀸을 놓는 경우의 수를 찾을 때 수많은 연산이 일어나게 된다.

 그래서 우리는 가지치기를 잘해야한다!
 백트래킹은 크게 4가지 절차로 구성되어 있다.

 'DFS 수행 - 유망한 노드 검토 - 서브 트리 이동 - 백트래킹 수행'
    1. DFS 수행: 먼저 평소와 같이 DFS를 수행하여 노드를 찾는다.
    2. 유망한 노드 검토: 방문한 노드를 포함해서 유망한 노드이면 서브 트리로 이동하고 그렇지 않으면 백트래킹을 수행한다.
    3. 방문한 노드의 하위 노드로 이동하여 다시 재귀를 통해 DFS를 수행한다.
    4. 백트래킹 수행: 방문한 노드를 가지치기하고 상위 노드로 백트래킹한 후 DFS를 다시 수행한다.
