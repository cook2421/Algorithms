[요약]
- 우선순위 큐(PriorityQueue)를 위해 만들어진 자료구조
- 최댓값과 최소값을 빠르게 구할 수 있음


[특징]
1. 완전 이진 트리를 기반으로 구현된다.
2. 느슨한 정렬(반정렬) 상태를 유지한다.
3. 중복된 값을 허용한다.
4. 배열로 가장 효과적인 구현이 가능하다.


[종류]
- 최대 힙: 부모 노드 값 > 자식 노드 값
- 최소 힙: 자식 노드 값 > 부모 노드 값


[표현 방법]
힙도 이진 트리(Binary Tree)이므로 차례대로 번호를 부여할 수 있고
완전 이진 트리를 기반으로 하기 때문에 각각의 노드 중간에 비어있는 노드가 없다.

이 번호를 배열의 인덱스로 생각하면 배열에 힙의 노드를 쉽게 저장하고 탐색할 수 있다.
그래서 힙을 구현하는 가장 효과적인 자료구조는 배열이다.

특징 한가지가 있다면 0번째 인덱스는 알아보기 쉽게하기 위해서 사용하지 않고
바로 1번 인덱스부터 사용한다.


[인덱스 구하기]
힙에는 인덱스 번호라는 특징이 존재하기 때문에 다음과 같은 방식으로 인덱스를 구할 수 있다.
- 왼쪽 자식의 인덱스: (부모의 인덱스) * 2
- 오른쪽 자식의 인덱스: (부모의 인덱스) * 2 + 1


[최소 Heap의 삽입 연산]
1. 삽입할 원소를 Heap의 마지막 인덱스에 추가시킨다.
2. 마지막 Index에서 /2를 하여 부모 노드의 인덱스를 찾는다.
3. 부모의 값과 비교하여 Heap의 특성을 만족시킨다.
4. 위의 과정을 반복한다.
(종료 조건: 루트 노드가 되거나 부모 노드의 값이 현재 노드보다 작을 때)


[최소 Heap의 삭제 연산]
1. 루트 노드 삭제
2. 말단 노드, 루트 노드로 변경
3. 자식 값과 비교하여 Heap의 특성을 만족시킨다.
4. 특성을 만족할 때까지 위와 같은 과정을 반복한다.